#!/usr/bin/env node
const fs = require('fs')
const path = require('path')
const readline = require('readline')

function question(prompt, def) {
  return new Promise((resolve) => {
    const rl = readline.createInterface({ input: process.stdin, output: process.stdout })
    const q = def ? `${prompt} (${def}): ` : `${prompt}: `
    rl.question(q, (ans) => { rl.close(); resolve(ans || def || '') })
  })
}

async function run() {
  console.log('Interactive setup for sf-duplicates-ui (.env) — local dev only')
  const root = path.join(__dirname, '..')
  const envPath = path.join(root, '.env')

  const CLIENT_ID = await question('Salesforce Client ID (Consumer Key)', process.env.CLIENT_ID || '')
  const CLIENT_SECRET = await question('Salesforce Client Secret (dev only)', process.env.CLIENT_SECRET || '')
  const AUTH_DOMAIN = await question('Salesforce Auth domain', process.env.AUTH_DOMAIN || 'https://login.salesforce.com')
  const REDIRECT_URI = await question('OAuth Redirect URI', process.env.REDIRECT_URI || 'http://localhost:53682/oauth/callback')
  const SCOPE = await question('OAuth scope', process.env.SCOPE || 'api refresh_token openid')

  const contents = []
  contents.push('# Salesforce OAuth settings (local dev only)')
  contents.push(`# Generated by scripts/setup.cjs — DO NOT COMMIT secrets to git`)
  contents.push(`export CLIENT_ID=${CLIENT_ID}`)
  contents.push(`export CLIENT_SECRET=${CLIENT_SECRET}`)
  contents.push(`# Vite-exposed client secret for local dev only. This will be available as import.meta.env.VITE_SF_CLIENT_SECRET`)
  contents.push(`VITE_SF_CLIENT_SECRET=${CLIENT_SECRET}`)
  contents.push(`# Also export for shell scripts that source this file`)
  contents.push(`export VITE_SF_CLIENT_SECRET=${CLIENT_SECRET}`)
  contents.push(`export AUTH_DOMAIN=${AUTH_DOMAIN}`)
  contents.push(`export REDIRECT_URI=${REDIRECT_URI}`)
  contents.push(`export SCOPE="${SCOPE}"`)
  contents.push('unset PKCE_VERIFIER PKCE_CHALLENGE')
  contents.push(`export PKCE_VERIFIER=$(python3 - <<'PY'\nimport os,base64\nprint(base64.urlsafe_b64encode(os.urandom(64)).decode().rstrip('='))\nPY\n)`)
  contents.push(`export PKCE_CHALLENGE=$(python3 - <<'PY'\nimport os,base64,hashlib\nv=os.environ['PKCE_VERIFIER'].encode()\nprint(base64.urlsafe_b64encode(hashlib.sha256(v).digest()).decode().rstrip('='))\nPY\n)`)

  try {
    fs.writeFileSync(envPath, contents.join('\n') + '\n', { mode: 0o600 })
    console.log(`Wrote ${envPath}`)
    console.log('\nNext: run `source sf-duplicates-ui/.env` in your shell (or reopen your terminal), then `npm run dev` from the project root.')
  } catch (e) {
    console.error('Failed to write .env', e && e.message)
    process.exit(1)
  }
}

run()
